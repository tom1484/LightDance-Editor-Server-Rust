generator client {
  provider = "cargo prisma"
  output   = "../src/prisma"
  module_path = "prisma"
  client_format = "folder"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Color {
  id        Int    @id @default(autoincrement())
  color     String @unique
  colorCode Int[]
}

model LEDEffect {
  id       Int    @id @default(autoincrement())
  name     String
  partName String
  repeat   Int
  frames   Json[]

  // relation => not in db
  editing EditingLEDEffect?

  @@unique([name, partName])
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @unique
  password String

  // relation => not in db
  editingPositionFrameId EditingPositionFrame?
  editingControlFrameId  EditingControlFrame?
  editingLEDEffectId     EditingLEDEffect?
}

model EditingPositionFrame {
  userId  Int  @id
  frameId Int? @unique

  // relation => not in db
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editingFrame PositionFrame? @relation(fields: [frameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EditingControlFrame {
  userId  Int  @id
  frameId Int? @unique

  // relation => not in db
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editingFrame ControlFrame? @relation(fields: [frameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model EditingLEDEffect {
  userId      Int  @id
  LEDEffectId Int? @unique

  // relation => not in db
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  editingLEDEffect LEDEffect? @relation(fields: [LEDEffectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Dancer {
  id   Int    @id @default(autoincrement())
  name String @unique

  // relation => not in db
  parts        Part[]
  positionData PositionData[]
}

enum PartType {
  LED
  FIBER
}

model Part {
  id       Int      @id @default(autoincrement())
  dancerId Int
  name     String
  type     PartType
  length   Int?

  // relation => not in db
  dancer      Dancer        @relation(fields: [dancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  controlData ControlData[]
}

model PositionData {
  dancerId Int
  frameId  Int
  x        Float
  y        Float
  z        Float

  // relation => not in db
  dancer Dancer        @relation(fields: [dancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  frame  PositionFrame @relation(fields: [frameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([dancerId, frameId])
}

model PositionFrame {
  id    Int @id @default(autoincrement())
  start Int @unique

  // relation => not in db
  editing       EditingPositionFrame?
  positionDatas PositionData[]
}

model ControlData {
  partId  Int
  frameId Int
  value   Json

  // relation => not in db
  part  Part         @relation(fields: [partId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  frame ControlFrame @relation(fields: [frameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([partId, frameId])
}

model ControlFrame {
  id    Int     @id @default(autoincrement())
  start Int     @unique
  fade  Boolean

  // relation => not in db
  editing      EditingControlFrame?
  controlDatas ControlData[]
}

model EffectListData {
  id             Int     @id @default(autoincrement())
  start          Int
  end            Int
  description    String?
  dancerData     Json[]
  controlFrames  Json[]
  positionFrames Json[]
}

model Logger {
  id            Int      @id @default(autoincrement())
  user          Int
  variableValue Json?
  fieldName     String
  time          DateTime @default(now())
  status        String
  errorMessage  Json?
  result        Json?
}
